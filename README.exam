# branchのdiff
./branch.diff

# compile
cd DimensionDefinitionLanguage; ./compile_checker.sh; cd ../
cd DimensionDefinitionLanguage; ./compile_checker.n007.sh; cd ../
./compile-all.sh 

# tq のテスト
## テストスクリプト実行
./tqcq.awk README_base.exam
## 単体テスト
### コンバート
bash conv-check.sh
- with WL
  cd DimensionDefinitionLanguage; bash conv-test.script; cd ../
- without WL
  cd DimensionDefinitionLanguage; bash conv2-test.script; cd ../

### ラベル、レファレンス、オペレータ処理
-
echo '#1$#2$U$$f(#2$2)' | ./tq.o in=/dev/stdin -FT -Pin
 => #1$#2$U$$f@#2$2(#2$2)
-
echo '#1$#2$U$$f(#2$2)' | ./tq.o in=/dev/stdin -FT -Pin -C
 => $f@$2,$2
echo '#1$#2$UU$$f(#2$2)' | ./tq.o in=/dev/stdin -FT -Pin -C
 => $f@$2,$2
- レファレンスのレファレンス
echo '(#1,#2,#3)(#4$#1,$#4)' | ./tq.o in=/dev/stdin -Pin -FT
echo '(#1,#2,#3)(#4$#1,#5$#4,$#5)' | ./tq.o in=/dev/stdin -Pin -FT
echo '(#1,#2,#3)(#4$#1h,#5$#4g,#6$#5f(H))' | ./tq.o in=/dev/stdin -Pin -FT -C

### エスケープ処理
#### クオーティング
./tq-escape.test

### compile: クオーティング
echo '#12$`$134()' | ./tq.o in=/dev/stdin -FT  -Pin -C -Fst
echo '$`$134()' | ./tq.o in=/dev/stdin -FT  -Pin -C -Fst
echo '#12$``$134()' | ./tq.o in=/dev/stdin -FT  -Pin -C -Fst
echo '$``$134()' | ./tq.o in=/dev/stdin -FT  -Pin -C -Fst
echo '$``$' | ./tq.o in=/dev/stdin -FT  -Pin -C -Fst
echo '$``$List' | ./tq.o in=/dev/stdin -FT -C -Pin   
 => "List"
echo '$``$List($4)' | ./tq.o in=/dev/stdin -FT -C -Pin   
 => "List($4)"

### アンパック
echo '$~~$($U$(7,8,$U$(5,6)))' | ./tq.o in=/dev/stdin -FT -Pin -C
 => $~~$($U$(7,8,$U$(5,6)))
./tq.o in=test_unpack.t -FT -Pin -C
 => $($1,$2,List,$1,$2)
./tq.o in=test_compile.t -C -FT -Pin    
 => $~List(List(List,List,List,List))

### リテラル化
./tq.o in=test_riteraltree.t -FT -Pin -C
./tq.o in=test_ritelal-unpack.t -FT -Pin -C

### 次元取得
- リーフノードのみ取得される:
./tq.o in=test_dim.ddf -Pin -Fst data=vals.csv -FT

### データバインド
- 基本(0)
echo '#1$OP$Head($#1[1])' | ./tq.o in=/dev/stdin -FT -Pin data=test.csv
 => #1$OP$Head($#1[1]@@#1$OP$Head(Length))
- 基本(1)
./tq.o in=test_ref.ddf -Pin -FT data=test.csv -Pout out=test_ref.ddl
 => 
(#1[2]@(Length,Weight),#2[2]@(mm,kg))
$#1@#1[2]@(Length,Weight)
4 Nodes were operated.
- 基本(2)
./tq.o in=test.ddf -FT out=test.ddl data=test.csv -Pin -Pout
- 配列指定のあるリーフノードにバインドされる
./tq.o in=test_bind.t  data=test.csv -FT -Pin
 => $TOP($X$List($LEAF,$LEAF[]@(Length),$LEAF[2]@(Weight,mm)),$X$List[2]($LEAF[2]@(kg,1,2,322)))

### レファレンス
#### 定義表現
-
echo '(f($##1),##1(a,$pow(a,2)))' | ./tq.o in=/dev/stdin -FT -Pin
 => (f($##1@##1(a,$pow(a,2))),##1(a,$pow(a,2)))

#### グラフ表現
- Arrow(Dom,Cod)
echo '(#1A,#2B,#3C,#4f,#5g,$#4($#1,$#2),$#5($#2,$#3))' | ./tq.o in=/dev/stdin -Pin -FT -FMa
- Dom(CodArrow)
echo '(A($#2f),#2B)' | ./tq.o in=/dev/stdin -Pin -FT -FMa
echo '(#1A,#2B,#3f,$#1($#2$#3))' | ./tq.o in=/dev/stdin -Pin -FT -FMa

#### 辞書表現
- ex2.dict

#### 単純テスト
- head/head
echo '$1($#3,#3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1($#3@#3$3,#3$3)
- ref-head/head
echo '$1(#2$#3,#3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(#2$#3@#3$3,#3$3)
- reft-head/head
echo '$1(##2$#3,#3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(##2$#3@#3$3,#3$3)
- head/tree
echo '$1($#3,##3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1($#3@##3$3,##3$3)
- ref-head/tree
echo '$1(#2$#3,##3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(#2$#3@##3$3,##3$3)
- reft-head/tree
echo '$1(##2$#3,##3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(##2$#3@##3$3,##3$3)
- reft-head/tree
echo '$1(##2$#3,##3$3())' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(##2$#3@##3$3,##3$3())
- tree/head
echo '$1($##3,#3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1($##3,#3$3)
- ref-tree/head
echo '$1(#2$##3,#3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(#2$##3,#3$3)
- reft-tree/head
echo '$1(##2$##3,#3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(##2$##3,#3$3)
- tree/tree
echo '$1($##3,##3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1($##3@##3$3,##3$3)
- ref-tree/tree
echo '$1(#2$##3,##3$3)' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(#2$##3@##3$3,##3$3)
- reft-tree/tree
echo '$1(##2$##3,##3$3())' | ./tq.o in=/dev/stdin -FT -Pin
 => $1(##2$##3@##3$3(),##3$3())

#### 木
./tq.o in=test_ref-tree.ddf -Pin -FT
#### セルフ
-
echo '#2$#1($#2,#1[4])' | ./tq.o in=/dev/stdin -Fst -Pin -FT
 => #2$#1@#1[4]($#2@#2$#1@#1[4],#1[4])
-
echo '$$CG$(A($#1$f,$#2$g$f),#1B($##2$g),##2C(a,b))' | ./tq.o in=/dev/stdin -FT -Pin 
 => $$CG$(A($#1$f@#1B,$#2$g$f@##2C),#1B($##2$g@##2C(a,b)),##2C(a,b))
-
echo '$$CG$(A($#1$f,$#2$g$f),#1B($##2$g(x,v)),##2C(a,b,a+b))' | ./tq.o in=/dev/stdin -FT -Pin 
 => $$CG$(A($#1$f@#1B,$#2$g$f@##2C),#1B($##2$g@##2C(a,b,a+b)(x,v)),##2C(a,b,a+b))
- ループ
echo '$$CG$(##1F($##2),##2G($##1))' | ./tq.o in=/dev/stdin -FT -Pin
 -> コアダンプ
echo '$$CG$(#1F($#2),#2G($#1))' | ./tq.o in=/dev/stdin -FT -Pin
 => $$CG$(#1F($#2@#2G),#2G($#1@#1F))

-
./tq.o in=test_ref.1.t -FMa -FT -Fh -Pin
- 完全グラフ(1)
./tq.o in=test_ref-graph.4.t -Pin -FT -FMa
 => #1$1($#2@#2$2($#1@#1$1,$#3@#3$3,$#4@#4$4),#3$3($#1@#1$1,$#2@#2$2,$#4@#4$4),#4$4($#1@#1$1,#2$2,$#3@#3$3))
====multiline====>
[0],1,,,,5,,,,9,,11,,
0,[1->11],2,3,4,5,,,,9,,,,
,,[2->0],,,,,,,,,,,
,,,[3->5],,,,,,,,,,
,,,,[4->9],,,,,,,,,
0,,,,,[5],6,7,8,9,,11,,
,,,,,,[6->0],,,,,,,
,,,,,,,[7->11],,,,,,
,,,,,,,,[8->9],,,,,
0,,,,,5,,,,[9],10,11,12,
,,,,,,,,,,[10->0],,,
,,,,,,,,,,,[11],,
,,,,,,,,,,,,[12->5],
- 完全グラフ(2)
./tq.o in=comp-graph-3.t -FMa -Pin

#### セルフ+ output
./tq.o in=test_ref.1.t out=test_ref.1.ot -FMa -FT -Fh -Pin -Pout

#### セルフ+ output + data    
- フラットパターン    
./tq.o in=test_ref.2.t out=test_ref.2.ot -FT -Pin -Pout data=test.csv
- 入れ子パターン
./tq.o in=test_ref.2.t out=test_ref.2-1.ot -FT -Pin -Pout data=test.csv
- out形式で参照をリストの入れ子に
./tq.o in=test_ref.2.t out=test_refR.2.ot -FT -Pin -Pout data=test.csv
- 再帰レファレンス($#9)
./tq.o in=test_ref.1.t out=test_ref.1.ot -FT -Pout data=test.csv -Pin
 =>
#0$0($#1[2]@#1$1[5]@(322,4,5,68,7)($#0@#0$0,#9$#2[3]@@#2$2(Length,Weight,mm,kg,1,2)),#2$2($#0@#0$0,#1$1[5]@(322,4,5,68,7)))
$#0@#0$0($#1@#1$1[5]@(322,4,5,68,7)($#0@#0$0,$#2@#2$2),$#2@#2$2($#1@#1$1[5]@(322,4,5,68,7),$#0@#0$0,$#9@#9$#2[3]@@#2$2(Length,Weight,mm,kg,1,2)))
15 Nodes were operated.
- 複合レファレンス
./tq.o in=test_ref.3.ddf data=test.csv -FT -Pin
 => $TOP(#1$1[2](#2$2[2]@(Length,Weight,mm,kg)),$#2[3]@@#2$2[2]@(Length,Weight,mm,kg)(1,2,322))
- 複合レファレンス(2)
./tq.o out=test_complex-ref.ddl -Pout -FT in=test_complex-ref.ddf data=test.csv

### 内積
./tq.o in=test1.ddf out=test1.ddl data=test1.csv -FT -Pprod -C
./tq.o in=test1.ddf out=test1-1.ddl data=test1.csv -FT -Pprod -C
./tq.o in=test1.ddf out=test1-2.ddl data=test1.csv -FT -Pprod -C
 => ((((DATE,Length,Quantity(1,mm))),((DATE,Weight,Quantity(2,kg)))),(((DATE,Length,Quantity(322,mm))),((DATE,Weight,Quantity(4,kg)))),(((DATE,Length,Quantity(5,mm))),((DATE,Weight,Quantity(68,kg)))))
./tq.o in=test_prd.1.ddf out=test_prd.1.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.2.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.3.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.3.ddl data=test.csv -FT -Pprod  -C  | ./tq.o in=/dev/stdin Sp=0,0 -Pin -FT
./tq.o in=test_prd.1.ddf out=test_prd.4.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.5.ddl data=test.csv -FT -Pprod  -C
 => (((Length,Quantity(1,mm)),(Weight,Quantity(2,kg))),((Length,Quantity(322,mm)),(Weight,Quantity(4,kg))),((Length,Quantity(5,mm)),(Weight,Quantity(68,kg))))
./tq.o in=test_prd.1.ddf out=test_prd.6.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.7.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.8.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.9.ddl data=test.csv -FT -Pprod  -C
./tq.o in=test_prd.1.ddf out=test_prd.10.ddl data=test.csv -FT -Pprod  -C
 ちょっとおかしい
#### 内積 x バインド x データ配列挿入
./tq.o in=num.ddf out=num.ddl data=num.csv -FT -Pprod  -C
 => (((Length,Quantity(1,mm)),(Weight,Quantity(2,kg))),((Length,Quantity(3,mm)),(Weight,Quantity(4,kg))),((Length,Quantity(5,mm)),(Weight,Quantity(6,kg))),((Length,Quantity(7,mm)),(Weight,Quantity(8,kg))))
#### 内積 x バインド 
./tq.o in=num2.ddf out=num2.ddl data=num.csv -FT -Pprod  -C 
 => (((L,W),Quantity(1,(mm,kg))),((L,W),Quantity(2,(mm,kg))),((L,W),Quantity(3,(mm,kg))),((L,W),Quantity(4,(mm,kg))),((L,W),Quantity(5,(mm,kg))),((L,W),Quantity(6,(mm,kg))))
#### 内積 x バインド x データ配列挿入
./tq.o in=num2.ddf out=num3.ddl data=num.csv -FT -Pprod  -C 
 => ((((L,W),Quantity(1,mm)),((L,W),Quantity(2,kg))),(((L,W),Quantity(3,mm)),((L,W),Quantity(4,kg))),(((L,W),Quantity(5,mm)),((L,W),Quantity(6,kg))))
#### 内積 x バインド x データ配列挿入
- DDL ::> @はdistributeする@なしはしない
./tq.o in=num4.ddf out=num4.ddl data=num.csv -FT -Pprod  -C 
 => ((((a,b1),Quantity(1,mm)),((a,b1),Quantity(2,kg))),(((a,b1),Quantity(3,mm)),((a,b1),Quantity(4,kg))),(((a,b1),Quantity(5,mm)),((a,b1),Quantity(6,kg))))
./tq.o in=num4.ddf out=num4.ddl data=num.csv -FT -Pprod  -C 
 => (((a,b1),Quantity(1,(mm,kg))),((a,b1),Quantity(2,(mm,kg))),((a,b1),Quantity(3,(mm,kg))),((a,b1),Quantity(4,(mm,kg))),((a,b1),Quantity(5,(mm,kg))),((a,b1),Quantity(6,(mm,kg))))
#### NS3
./tq.o in=data.ns3.ddf out=data.ns3.ddl data=data.ns3.csv -FT -Pprod  -C
 => (((Length,Quantity(300,mm)),(Weight,Quantity(100,kg))),((Length,Quantity(320,mm)),(Weight,Quantity(102,kg))),((Length,Quantity(302,mm)),(Weight,Quantity(101,kg))),((Length,Quantity(360,mm)),(Weight,Quantity(125,kg))))



### サーチ
- ポジション指定
./tq.o in=test.t Sp=0,1 -FT -Pin


## パフォーマンス
### 大型の頭部
- 500Mのhead
./tq.o in=large-head.ddf buff=1000000000 -Pin -FT
### 1.2億ノード
- 坂本さん、パフォーマンスはこれと比べてください。
time ./tq.o in=lllarge-single-test.t buff=30
124653854 Nodes were operated.
real	0m49.893s
user	0m35.371s
sys	0m14.503s
@ 26G mem
-
time ./tq.o in=lllarge-single-test.t buff=30 -FJ -Pin > lllarge-single-test.json
124653854 Nodes were operated.
real	1m24.268s
user	1m2.497s
sys	0m19.662s
@ 34G mem
-
time cat lllarge-single-test.json | jq . > /dev/null
real    2m25.157s
user    2m5.473s
sys     0m20.885s
@ 36G mem
- python
time ./importer.py lllarge-single-test.json
real	0m51.391s
user	0m43.341s
sys	0m8.028s
@ 12G mem
### 4.9億ノード
time ./tq.o in=lllarge4-single-test.t -FT
498615417 Nodes were operated.
real    3m28.752s
user    2m28.315s
sys     1m0.389s
@ 106G mem
-
time ./tq.o in=lllarge4-single-test.t buff=30 -FJ -Pin > lllarge4-single-test.json
real	5m56.396s
user	4m21.241s
sys	1m34.636s
@ 132G mem
-
time cat lllarge4-single-test.json | jq . > /dev/null
real	5m56.396s
user	4m21.241s
sys	1m34.636s
@ 135G mem
- python (終了直前にメモリー解放する)
time ./importer.py lllarge4-single-test.json
real	4m7.164s
user	3m36.530s
sys	0m30.504s
@ 53G mem (max)
### 大型配列のバインド 1.6G => 1.2G(4億データポイント)
-
time ./tq.o in=large-test_bind.t -FT data=large-test.csv data_buff=2000000000 
4 Nodes were operated.
real    0m14.931s
user    0m14.010s
sys     0m0.920s
@ 1.2G mem
-
time ./tq.o in=large-test_bind.t -FT -Pin data=large-test.csv data_buff=2000000000 | ./tq.o in=/dev/stdin
4 Nodes were operated.
400000004 Nodes were operated.
real    2m37.815s
user    1m51.709s
sys     0m49.234s
@ 86G mem



