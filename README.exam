# tq のテスト
## クイックチェック
cd /home/kamano/gitsrc/RECURSIVE-SYSTEM
- コンバート
bash conv-check.script
cd DimensionDefinitionLanguage; bash conv-test.script; cd ../
- バインド
./tq.o in=test.ddf -FT out=test.ddl data=test.csv -Pin -Pout

## コンバート
上記

## エスケープ処理
./tq.o in=test_escape.1.t -FT -Pin
./tq.o in=test_escape.2.t -FT -Pin
./tq.o in=test_escape.3.t -FT -Pin
./tq.o in=test_escape.4.t -FT -Pin

## コンパイル
- -C
./tq.o in=test_compile.t -C -FT -Pin    
 => List(List(List,List,List,List))
- クオーティング
echo '$``List' | ./tq.o in=/dev/stdin -FT -C -Pin   
 => "List"

## サーチ
- ポジション指定
./tq.o in=test.t Sp=0,1 -FT -Pin

## データバインド
### 配列指定のあるリーフノードにバインドされる
- 上記
- ex.2
./tq.o in=test_bind.t  data=test.csv -FT -Pin
 => $TOP($X$List($LEAF[]@(Length),$LEAF[2]@(Weight,mm)),$X$List[2]($LEAF[2]@(kg,1,2,322)))
### 大型配列のバインド4億データポイント/1G
./tq.o in=large-test_bind.t -FT -Pin data=large-test.csv data_buff=2000000000 | ./tq.o in=/dev/stdin

## レファレンス
- セルフ
./tq.o in=test_ref.1.t -FMa -FT -Fh -Pin

- セルフ+ output
./tq.o in=test_ref.1.t out=test_ref.1.ot -FMa -FT -Fh -Pin -Pout

- セルフ+ output + data    
-- 正常パターン    
./tq.o in=test_ref.2.t out=test_ref.2.ot -FMa -FT -Fh -Pin -Pout -C data=test.csv
-- TODO: output形式でレファレンスノードにデータバインドされる場合にもデータをprint
./tq.o in=test_ref.1.t out=test_ref.1.ot -FMa -FT -Fh -Pin -Pout -C data=test.csv
-$0(
  -$#1[2]@$1[5]@(322,4,5,68,7)(
    -$#0@$0,
    +$#2[3]@$2@(Length,Weight,mm,kg,1,2)),
  +$2(
    -$#0@$0,
    +$1[5]@(322,4,5,68,7)))

-$#0@$0(
  -$#1@$1[5]@(322,4,5,68,7)(
    -$#0@$0,
    +$#2@$2),			<=　ここ！
  +$#2@$2(
    -$#1@$1[5]@(322,4,5,68,7),
    +$#0@$0))

