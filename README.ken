# 圏論的処理について
## tqの基本
### 表現 (凡例)
$$...$xxx は、xxxが...クラスに属する何かであることを表す。
$...$ はオペレータ(関数)である。

### 解釈
tqにおける台は、対象(Object)と射(Arrow)とを含む。

## 定義
- Object
  * Dom
  * Cod
- Arrow
において、Arrowによって関係が定義されるObjectが圏である。
写像
	f:A->B
	f(A)=B
は、tq では、
	$$CAT$(f,A,B)
	$$CG$(A($#1f),#1B)
と表す。
	$$CAT$
はCategoryクラスを表す。
	$$CG$
はCategoryGraphクラスであり、エッジはレファレンスで表す。

tq による無名表現は以下である。
	$$CAT$($$ARR$,$$DOM$,$$COD$)
	$$CG$($$DOM$($$REF$$$ARR$),$$LB$$$COD$)

## 基本
	f:A->B
	$$CAT$(f,A,B)
	$$CG$(A($#1f),#1B)
のとき、
	$Dom$(f) => A
	$Cod$(f) => B
である。

恒等射の表現は、
	$$CAT$($1(A),A,A)
となる。

-- 例
	h:G->U(C(G))
のtq表現
	$$CAT$(h,G,U(C(G)))
	$$CG$(#1G($##2h),##2U(C($#1)))

- 合成
	(g@f)(a)
は、
	g(f(a))
の表現と同じ。
	(f1@f2@...)
の解釈には二つの流儀があり、関数のapply順を逆順にする場合もある。
tqではこの混乱を避けるため、(f1(f2(...)))以外の表現を禁じる。

- 結合則
すべての
	$$CAT$(f,A,B); $$CAT$(g,B,C); $$CAT$(h,C,D)
に対して、
	h(g(f())) = h(g)(f())
	= $U$(h(g)(f())) = h(g)(f())
である。

- 単位元
すべての
	$$CAT$(f,A,B)
に対して、
	f($1(A)) = f = $1(B)(f)
となる$1がある。

- Functor
	F:C->D
	$$CAT$(F,C,D)
のとき、以下を満たすのがFunctorである。
1.	F($$CAT$(f,C,D)) = $$CAT$(F(f),F(C),F(D));
2.	F($1(A)) = $1(F(A));
3.	F(g(f())) = F(g)(F(f()))

-- 例
	A -f-> B
	 \     |
	  \    g
	g@f\   |
	    \  |
	    _\|| 
	      \|/
	       C 

	$$CAT$(f,A,B) ; $$CAT$(g,B,C)
	$$CG$(A($#1f),#1B($#2g),#2C)
	のとき、
	$$CG$(A($#1f,$#2g*f),#1B($#2g),#2C)
	ただし、$$CG$ は、CategoryGraphクラス
-- tq
echo '$$CG$(A($#1f),#1B($#2g),#2C)' | ./tq.o in=/dev/stdin -FT -Pin
 => $$CG$(A($#1f@#1B),#1B($#2g@#2C),#2C)

- モノ射
圏Cにおいて、
	C -g-> A -f-> B
	  -h->
のtq表現は
	$$CG$(C($#2g,$#2h),#2A($#3f),#3B)
である。
	f*g = f*h
ならば、
	g = h
である。

- エピ射
圏Dにおいて、
	A -f-> B -i-> D
	         -j->
のtq表現は
	$$CG$(A($#2f),#2B($#3i,$#3j),#3D)
である。
	i*f = j*f
ならば、
	i = j
である。



