Terminals which are not used

   ALPH
   NUM
   REF
   REF_S
   REF_E
   LABEL
   ERR


Rules never reduced

   18 list: arg


State 6 conflicts: 1 shift/reduce, 1 reduce/reduce
State 17 conflicts: 1 shift/reduce, 1 reduce/reduce
State 21 conflicts: 1 shift/reduce, 1 reduce/reduce
State 23 conflicts: 3 shift/reduce
State 31 conflicts: 1 reduce/reduce
State 33 conflicts: 1 reduce/reduce
State 35 conflicts: 1 reduce/reduce
State 37 conflicts: 1 reduce/reduce


Grammar

    0 $accept: line_list $end

    1 line_list: line
    2          | line_list line

    3 line: dimension_expression END

    4 dimension_expression: arg
    5                     | list
    6                     | arg RULE arg
    7                     | arg RULE list
    8                     | list RULE arg
    9                     | list RULE list
   10                     | arg RULE arg REW arg
   11                     | arg RULE arg REW list
   12                     | arg RULE list REW arg
   13                     | arg RULE list REW list
   14                     | list RULE arg REW arg
   15                     | list RULE arg REW list
   16                     | list RULE list REW arg
   17                     | list RULE list REW list

   18 list: arg
   19     | arg chain

   20 chain: arg
   21      | FUNC_S chain FUNC_E
   22      | FUNC_S FUNC_E
   23      | chain LIST chain
   24      | chain chain

   25 arg: ARGEX
   26    | ARGEX DIM


Terminals, with rules where they appear

$end (0) 0
error (256)
ARGEX (258) 25 26
ALPH (259)
NUM (260)
DIM (261) 26
LIST (262) 23
FUNC_S (263) 21 22
FUNC_E (264) 21 22
RULE (265) 6 7 8 9 10 11 12 13 14 15 16 17
REW (266) 10 11 12 13 14 15 16 17
REF (267)
REF_S (268)
REF_E (269)
LABEL (270)
END (271) 3
ERR (272)


Nonterminals, with rules where they appear

$accept (18)
    on left: 0
line_list (19)
    on left: 1 2, on right: 0 2
line (20)
    on left: 3, on right: 1 2
dimension_expression (21)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17, on right: 3
list (22)
    on left: 18 19, on right: 5 7 8 9 11 12 13 14 15 16 17
chain (23)
    on left: 20 21 22 23 24, on right: 19 21 23 24
arg (24)
    on left: 25 26, on right: 4 6 7 8 10 11 12 13 14 15 16 18 19 20


state 0

    0 $accept: . line_list $end

    ARGEX  shift, and go to state 1

    line_list             go to state 2
    line                  go to state 3
    dimension_expression  go to state 4
    list                  go to state 5
    arg                   go to state 6


state 1

   25 arg: ARGEX .
   26    | ARGEX . DIM

    DIM  shift, and go to state 7

    $default  reduce using rule 25 (arg)


state 2

    0 $accept: line_list . $end
    2 line_list: line_list . line

    $end   shift, and go to state 8
    ARGEX  shift, and go to state 1

    line                  go to state 9
    dimension_expression  go to state 4
    list                  go to state 5
    arg                   go to state 6


state 3

    1 line_list: line .

    $default  reduce using rule 1 (line_list)


state 4

    3 line: dimension_expression . END

    END  shift, and go to state 10


state 5

    5 dimension_expression: list .
    8                     | list . RULE arg
    9                     | list . RULE list
   14                     | list . RULE arg REW arg
   15                     | list . RULE arg REW list
   16                     | list . RULE list REW arg
   17                     | list . RULE list REW list

    RULE  shift, and go to state 11

    $default  reduce using rule 5 (dimension_expression)


state 6

    4 dimension_expression: arg .
    6                     | arg . RULE arg
    7                     | arg . RULE list
   10                     | arg . RULE arg REW arg
   11                     | arg . RULE arg REW list
   12                     | arg . RULE list REW arg
   13                     | arg . RULE list REW list
   18 list: arg .
   19     | arg . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12
    RULE    shift, and go to state 13

    RULE      [reduce using rule 18 (list)]
    END       reduce using rule 4 (dimension_expression)
    END       [reduce using rule 18 (list)]
    $default  reduce using rule 4 (dimension_expression)

    chain  go to state 14
    arg    go to state 15


state 7

   26 arg: ARGEX DIM .

    $default  reduce using rule 26 (arg)


state 8

    0 $accept: line_list $end .

    $default  accept


state 9

    2 line_list: line_list line .

    $default  reduce using rule 2 (line_list)


state 10

    3 line: dimension_expression END .

    $default  reduce using rule 3 (line)


state 11

    8 dimension_expression: list RULE . arg
    9                     | list RULE . list
   14                     | list RULE . arg REW arg
   15                     | list RULE . arg REW list
   16                     | list RULE . list REW arg
   17                     | list RULE . list REW list

    ARGEX  shift, and go to state 1

    list  go to state 16
    arg   go to state 17


state 12

   21 chain: FUNC_S . chain FUNC_E
   22      | FUNC_S . FUNC_E

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12
    FUNC_E  shift, and go to state 18

    chain  go to state 19
    arg    go to state 15


state 13

    6 dimension_expression: arg RULE . arg
    7                     | arg RULE . list
   10                     | arg RULE . arg REW arg
   11                     | arg RULE . arg REW list
   12                     | arg RULE . list REW arg
   13                     | arg RULE . list REW list

    ARGEX  shift, and go to state 1

    list  go to state 20
    arg   go to state 21


state 14

   19 list: arg chain .
   23 chain: chain . LIST chain
   24      | chain . chain

    ARGEX   shift, and go to state 1
    LIST    shift, and go to state 22
    FUNC_S  shift, and go to state 12

    $default  reduce using rule 19 (list)

    chain  go to state 23
    arg    go to state 15


state 15

   20 chain: arg .

    $default  reduce using rule 20 (chain)


state 16

    9 dimension_expression: list RULE list .
   16                     | list RULE list . REW arg
   17                     | list RULE list . REW list

    REW  shift, and go to state 24

    $default  reduce using rule 9 (dimension_expression)


state 17

    8 dimension_expression: list RULE arg .
   14                     | list RULE arg . REW arg
   15                     | list RULE arg . REW list
   18 list: arg .
   19     | arg . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12
    REW     shift, and go to state 25

    REW       [reduce using rule 18 (list)]
    END       reduce using rule 8 (dimension_expression)
    END       [reduce using rule 18 (list)]
    $default  reduce using rule 8 (dimension_expression)

    chain  go to state 14
    arg    go to state 15


state 18

   22 chain: FUNC_S FUNC_E .

    $default  reduce using rule 22 (chain)


state 19

   21 chain: FUNC_S chain . FUNC_E
   23      | chain . LIST chain
   24      | chain . chain

    ARGEX   shift, and go to state 1
    LIST    shift, and go to state 22
    FUNC_S  shift, and go to state 12
    FUNC_E  shift, and go to state 26

    chain  go to state 23
    arg    go to state 15


state 20

    7 dimension_expression: arg RULE list .
   12                     | arg RULE list . REW arg
   13                     | arg RULE list . REW list

    REW  shift, and go to state 27

    $default  reduce using rule 7 (dimension_expression)


state 21

    6 dimension_expression: arg RULE arg .
   10                     | arg RULE arg . REW arg
   11                     | arg RULE arg . REW list
   18 list: arg .
   19     | arg . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12
    REW     shift, and go to state 28

    REW       [reduce using rule 18 (list)]
    END       reduce using rule 6 (dimension_expression)
    END       [reduce using rule 18 (list)]
    $default  reduce using rule 6 (dimension_expression)

    chain  go to state 14
    arg    go to state 15


state 22

   23 chain: chain LIST . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12

    chain  go to state 29
    arg    go to state 15


state 23

   23 chain: chain . LIST chain
   24      | chain . chain
   24      | chain chain .

    ARGEX   shift, and go to state 1
    LIST    shift, and go to state 22
    FUNC_S  shift, and go to state 12

    ARGEX     [reduce using rule 24 (chain)]
    LIST      [reduce using rule 24 (chain)]
    FUNC_S    [reduce using rule 24 (chain)]
    $default  reduce using rule 24 (chain)

    chain  go to state 23
    arg    go to state 15


state 24

   16 dimension_expression: list RULE list REW . arg
   17                     | list RULE list REW . list

    ARGEX  shift, and go to state 1

    list  go to state 30
    arg   go to state 31


state 25

   14 dimension_expression: list RULE arg REW . arg
   15                     | list RULE arg REW . list

    ARGEX  shift, and go to state 1

    list  go to state 32
    arg   go to state 33


state 26

   21 chain: FUNC_S chain FUNC_E .

    $default  reduce using rule 21 (chain)


state 27

   12 dimension_expression: arg RULE list REW . arg
   13                     | arg RULE list REW . list

    ARGEX  shift, and go to state 1

    list  go to state 34
    arg   go to state 35


state 28

   10 dimension_expression: arg RULE arg REW . arg
   11                     | arg RULE arg REW . list

    ARGEX  shift, and go to state 1

    list  go to state 36
    arg   go to state 37


state 29

   23 chain: chain . LIST chain
   23      | chain LIST chain .
   24      | chain . chain

    LIST  shift, and go to state 22

    $default  reduce using rule 23 (chain)

    chain  go to state 23
    arg    go to state 15


state 30

   17 dimension_expression: list RULE list REW list .

    $default  reduce using rule 17 (dimension_expression)


state 31

   16 dimension_expression: list RULE list REW arg .
   18 list: arg .
   19     | arg . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12

    END       reduce using rule 16 (dimension_expression)
    END       [reduce using rule 18 (list)]
    $default  reduce using rule 16 (dimension_expression)

    chain  go to state 14
    arg    go to state 15


state 32

   15 dimension_expression: list RULE arg REW list .

    $default  reduce using rule 15 (dimension_expression)


state 33

   14 dimension_expression: list RULE arg REW arg .
   18 list: arg .
   19     | arg . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12

    END       reduce using rule 14 (dimension_expression)
    END       [reduce using rule 18 (list)]
    $default  reduce using rule 14 (dimension_expression)

    chain  go to state 14
    arg    go to state 15


state 34

   13 dimension_expression: arg RULE list REW list .

    $default  reduce using rule 13 (dimension_expression)


state 35

   12 dimension_expression: arg RULE list REW arg .
   18 list: arg .
   19     | arg . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12

    END       reduce using rule 12 (dimension_expression)
    END       [reduce using rule 18 (list)]
    $default  reduce using rule 12 (dimension_expression)

    chain  go to state 14
    arg    go to state 15


state 36

   11 dimension_expression: arg RULE arg REW list .

    $default  reduce using rule 11 (dimension_expression)


state 37

   10 dimension_expression: arg RULE arg REW arg .
   18 list: arg .
   19     | arg . chain

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 12

    END       reduce using rule 10 (dimension_expression)
    END       [reduce using rule 18 (list)]
    $default  reduce using rule 10 (dimension_expression)

    chain  go to state 14
    arg    go to state 15
