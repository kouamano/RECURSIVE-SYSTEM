Terminals which are not used

   ALPH
   NUM
   REF
   REF_S
   REF_E
   ERR


Grammar

    0 $accept: line_list $end

    1 line_list: line
    2          | line_list line

    3 line: dimension_expression END

    4 dimension_expression: arg
    5                     | list
    6                     | arg RULE arg
    7                     | arg RULE list
    8                     | list RULE arg
    9                     | list RULE list
   10                     | arg RULE arg REW arg
   11                     | arg RULE arg REW list
   12                     | arg RULE list REW arg
   13                     | arg RULE list REW list
   14                     | list RULE arg REW arg
   15                     | list RULE arg REW list
   16                     | list RULE list REW arg
   17                     | list RULE list REW list

   18 list: FUNC_S func FUNC_E

   19 func: arg
   20     | FUNC_S func FUNC_E
   21     | func LIST func

   22 arg: ARGEX
   23    | ARGEX DIM
   24    | LABEL ARGEX
   25    | LABEL ARGEX DIM
   26    | '$' LABEL ARGEX
   27    | '$' LABEL ARGEX DIM


Terminals, with rules where they appear

$end (0) 0
'$' (36) 26 27
error (256)
ARGEX (258) 22 23 24 25 26 27
ALPH (259)
NUM (260)
DIM (261) 23 25 27
LIST (262) 21
FUNC_S (263) 18 20
FUNC_E (264) 18 20
RULE (265) 6 7 8 9 10 11 12 13 14 15 16 17
REW (266) 10 11 12 13 14 15 16 17
REF (267)
REF_S (268)
REF_E (269)
LABEL (270) 24 25 26 27
END (271) 3
ERR (272)


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
line_list (20)
    on left: 1 2, on right: 0 2
line (21)
    on left: 3, on right: 1 2
dimension_expression (22)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17, on right: 3
list (23)
    on left: 18, on right: 5 7 8 9 11 12 13 14 15 16 17
func (24)
    on left: 19 20 21, on right: 18 20 21
arg (25)
    on left: 22 23 24 25 26 27, on right: 4 6 7 8 10 11 12 13 14 15
    16 19


state 0

    0 $accept: . line_list $end

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    line_list             go to state 5
    line                  go to state 6
    dimension_expression  go to state 7
    list                  go to state 8
    arg                   go to state 9


state 1

   22 arg: ARGEX .
   23    | ARGEX . DIM

    DIM  shift, and go to state 10

    $default  reduce using rule 22 (arg)


state 2

   18 list: FUNC_S . func FUNC_E

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 11
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    func  go to state 12
    arg   go to state 13


state 3

   24 arg: LABEL . ARGEX
   25    | LABEL . ARGEX DIM

    ARGEX  shift, and go to state 14


state 4

   26 arg: '$' . LABEL ARGEX
   27    | '$' . LABEL ARGEX DIM

    LABEL  shift, and go to state 15


state 5

    0 $accept: line_list . $end
    2 line_list: line_list . line

    $end    shift, and go to state 16
    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    line                  go to state 17
    dimension_expression  go to state 7
    list                  go to state 8
    arg                   go to state 9


state 6

    1 line_list: line .

    $default  reduce using rule 1 (line_list)


state 7

    3 line: dimension_expression . END

    END  shift, and go to state 18


state 8

    5 dimension_expression: list .
    8                     | list . RULE arg
    9                     | list . RULE list
   14                     | list . RULE arg REW arg
   15                     | list . RULE arg REW list
   16                     | list . RULE list REW arg
   17                     | list . RULE list REW list

    RULE  shift, and go to state 19

    $default  reduce using rule 5 (dimension_expression)


state 9

    4 dimension_expression: arg .
    6                     | arg . RULE arg
    7                     | arg . RULE list
   10                     | arg . RULE arg REW arg
   11                     | arg . RULE arg REW list
   12                     | arg . RULE list REW arg
   13                     | arg . RULE list REW list

    RULE  shift, and go to state 20

    $default  reduce using rule 4 (dimension_expression)


state 10

   23 arg: ARGEX DIM .

    $default  reduce using rule 23 (arg)


state 11

   20 func: FUNC_S . func FUNC_E

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 11
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    func  go to state 21
    arg   go to state 13


state 12

   18 list: FUNC_S func . FUNC_E
   21 func: func . LIST func

    LIST    shift, and go to state 22
    FUNC_E  shift, and go to state 23


state 13

   19 func: arg .

    $default  reduce using rule 19 (func)


state 14

   24 arg: LABEL ARGEX .
   25    | LABEL ARGEX . DIM

    DIM  shift, and go to state 24

    $default  reduce using rule 24 (arg)


state 15

   26 arg: '$' LABEL . ARGEX
   27    | '$' LABEL . ARGEX DIM

    ARGEX  shift, and go to state 25


state 16

    0 $accept: line_list $end .

    $default  accept


state 17

    2 line_list: line_list line .

    $default  reduce using rule 2 (line_list)


state 18

    3 line: dimension_expression END .

    $default  reduce using rule 3 (line)


state 19

    8 dimension_expression: list RULE . arg
    9                     | list RULE . list
   14                     | list RULE . arg REW arg
   15                     | list RULE . arg REW list
   16                     | list RULE . list REW arg
   17                     | list RULE . list REW list

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    list  go to state 26
    arg   go to state 27


state 20

    6 dimension_expression: arg RULE . arg
    7                     | arg RULE . list
   10                     | arg RULE . arg REW arg
   11                     | arg RULE . arg REW list
   12                     | arg RULE . list REW arg
   13                     | arg RULE . list REW list

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    list  go to state 28
    arg   go to state 29


state 21

   20 func: FUNC_S func . FUNC_E
   21     | func . LIST func

    LIST    shift, and go to state 22
    FUNC_E  shift, and go to state 30


state 22

   21 func: func LIST . func

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 11
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    func  go to state 31
    arg   go to state 13


state 23

   18 list: FUNC_S func FUNC_E .

    $default  reduce using rule 18 (list)


state 24

   25 arg: LABEL ARGEX DIM .

    $default  reduce using rule 25 (arg)


state 25

   26 arg: '$' LABEL ARGEX .
   27    | '$' LABEL ARGEX . DIM

    DIM  shift, and go to state 32

    $default  reduce using rule 26 (arg)


state 26

    9 dimension_expression: list RULE list .
   16                     | list RULE list . REW arg
   17                     | list RULE list . REW list

    REW  shift, and go to state 33

    $default  reduce using rule 9 (dimension_expression)


state 27

    8 dimension_expression: list RULE arg .
   14                     | list RULE arg . REW arg
   15                     | list RULE arg . REW list

    REW  shift, and go to state 34

    $default  reduce using rule 8 (dimension_expression)


state 28

    7 dimension_expression: arg RULE list .
   12                     | arg RULE list . REW arg
   13                     | arg RULE list . REW list

    REW  shift, and go to state 35

    $default  reduce using rule 7 (dimension_expression)


state 29

    6 dimension_expression: arg RULE arg .
   10                     | arg RULE arg . REW arg
   11                     | arg RULE arg . REW list

    REW  shift, and go to state 36

    $default  reduce using rule 6 (dimension_expression)


state 30

   20 func: FUNC_S func FUNC_E .

    $default  reduce using rule 20 (func)


state 31

   21 func: func . LIST func
   21     | func LIST func .

    LIST  shift, and go to state 22

    $default  reduce using rule 21 (func)


state 32

   27 arg: '$' LABEL ARGEX DIM .

    $default  reduce using rule 27 (arg)


state 33

   16 dimension_expression: list RULE list REW . arg
   17                     | list RULE list REW . list

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    list  go to state 37
    arg   go to state 38


state 34

   14 dimension_expression: list RULE arg REW . arg
   15                     | list RULE arg REW . list

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    list  go to state 39
    arg   go to state 40


state 35

   12 dimension_expression: arg RULE list REW . arg
   13                     | arg RULE list REW . list

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    list  go to state 41
    arg   go to state 42


state 36

   10 dimension_expression: arg RULE arg REW . arg
   11                     | arg RULE arg REW . list

    ARGEX   shift, and go to state 1
    FUNC_S  shift, and go to state 2
    LABEL   shift, and go to state 3
    '$'     shift, and go to state 4

    list  go to state 43
    arg   go to state 44


state 37

   17 dimension_expression: list RULE list REW list .

    $default  reduce using rule 17 (dimension_expression)


state 38

   16 dimension_expression: list RULE list REW arg .

    $default  reduce using rule 16 (dimension_expression)


state 39

   15 dimension_expression: list RULE arg REW list .

    $default  reduce using rule 15 (dimension_expression)


state 40

   14 dimension_expression: list RULE arg REW arg .

    $default  reduce using rule 14 (dimension_expression)


state 41

   13 dimension_expression: arg RULE list REW list .

    $default  reduce using rule 13 (dimension_expression)


state 42

   12 dimension_expression: arg RULE list REW arg .

    $default  reduce using rule 12 (dimension_expression)


state 43

   11 dimension_expression: arg RULE arg REW list .

    $default  reduce using rule 11 (dimension_expression)


state 44

   10 dimension_expression: arg RULE arg REW arg .

    $default  reduce using rule 10 (dimension_expression)
