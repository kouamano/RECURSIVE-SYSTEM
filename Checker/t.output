Terminals which are not used

   ALPH
   NUM
   REF
   REF_S
   REF_E
   ERR


State 25 conflicts: 1 shift/reduce
State 29 conflicts: 1 shift/reduce


Grammar

    0 $accept: line_list $end

    1 line_list: line
    2          | line_list line

    3 line: dimension_expression END

    4 dimension_expression: arg
    5                     | list
    6                     | arg RULE arg
    7                     | arg RULE list
    8                     | list RULE arg
    9                     | list RULE list
   10                     | arg RULE arg REW arg
   11                     | arg RULE arg REW list
   12                     | arg RULE list REW arg
   13                     | arg RULE list REW list
   14                     | list RULE arg REW arg
   15                     | list RULE arg REW list
   16                     | list RULE list REW arg
   17                     | list RULE list REW list

   18 list: arg func

   19 func: FUNC_S argm FUNC_E
   20     | FUNC_S FUNC_E
   21     | func func

   22 argm: args
   23     | args func
   24     | argm LIST argm

   25 args: arg
   26     | args LIST arg

   27 arg: ARGEX
   28    | ARGEX DIM
   29    | LABEL ARGEX
   30    | LABEL ARGEX DIM
   31    | '$' LABEL ARGEX
   32    | '$' LABEL ARGEX DIM


Terminals, with rules where they appear

$end (0) 0
'$' (36) 31 32
error (256)
ARGEX (258) 27 28 29 30 31 32
ALPH (259)
NUM (260)
DIM (261) 28 30 32
LIST (262) 24 26
FUNC_S (263) 19 20
FUNC_E (264) 19 20
RULE (265) 6 7 8 9 10 11 12 13 14 15 16 17
REW (266) 10 11 12 13 14 15 16 17
REF (267)
REF_S (268)
REF_E (269)
LABEL (270) 29 30 31 32
END (271) 3
ERR (272)


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
line_list (20)
    on left: 1 2, on right: 0 2
line (21)
    on left: 3, on right: 1 2
dimension_expression (22)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17, on right: 3
list (23)
    on left: 18, on right: 5 7 8 9 11 12 13 14 15 16 17
func (24)
    on left: 19 20 21, on right: 18 21 23
argm (25)
    on left: 22 23 24, on right: 19 24
args (26)
    on left: 25 26, on right: 22 23 26
arg (27)
    on left: 27 28 29 30 31 32, on right: 4 6 7 8 10 11 12 13 14 15
    16 18 25 26


state 0

    0 $accept: . line_list $end

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    line_list             go to state 4
    line                  go to state 5
    dimension_expression  go to state 6
    list                  go to state 7
    arg                   go to state 8


state 1

   27 arg: ARGEX .
   28    | ARGEX . DIM

    DIM  shift, and go to state 9

    $default  reduce using rule 27 (arg)


state 2

   29 arg: LABEL . ARGEX
   30    | LABEL . ARGEX DIM

    ARGEX  shift, and go to state 10


state 3

   31 arg: '$' . LABEL ARGEX
   32    | '$' . LABEL ARGEX DIM

    LABEL  shift, and go to state 11


state 4

    0 $accept: line_list . $end
    2 line_list: line_list . line

    $end   shift, and go to state 12
    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    line                  go to state 13
    dimension_expression  go to state 6
    list                  go to state 7
    arg                   go to state 8


state 5

    1 line_list: line .

    $default  reduce using rule 1 (line_list)


state 6

    3 line: dimension_expression . END

    END  shift, and go to state 14


state 7

    5 dimension_expression: list .
    8                     | list . RULE arg
    9                     | list . RULE list
   14                     | list . RULE arg REW arg
   15                     | list . RULE arg REW list
   16                     | list . RULE list REW arg
   17                     | list . RULE list REW list

    RULE  shift, and go to state 15

    $default  reduce using rule 5 (dimension_expression)


state 8

    4 dimension_expression: arg .
    6                     | arg . RULE arg
    7                     | arg . RULE list
   10                     | arg . RULE arg REW arg
   11                     | arg . RULE arg REW list
   12                     | arg . RULE list REW arg
   13                     | arg . RULE list REW list
   18 list: arg . func

    FUNC_S  shift, and go to state 16
    RULE    shift, and go to state 17

    $default  reduce using rule 4 (dimension_expression)

    func  go to state 18


state 9

   28 arg: ARGEX DIM .

    $default  reduce using rule 28 (arg)


state 10

   29 arg: LABEL ARGEX .
   30    | LABEL ARGEX . DIM

    DIM  shift, and go to state 19

    $default  reduce using rule 29 (arg)


state 11

   31 arg: '$' LABEL . ARGEX
   32    | '$' LABEL . ARGEX DIM

    ARGEX  shift, and go to state 20


state 12

    0 $accept: line_list $end .

    $default  accept


state 13

    2 line_list: line_list line .

    $default  reduce using rule 2 (line_list)


state 14

    3 line: dimension_expression END .

    $default  reduce using rule 3 (line)


state 15

    8 dimension_expression: list RULE . arg
    9                     | list RULE . list
   14                     | list RULE . arg REW arg
   15                     | list RULE . arg REW list
   16                     | list RULE . list REW arg
   17                     | list RULE . list REW list

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    list  go to state 21
    arg   go to state 22


state 16

   19 func: FUNC_S . argm FUNC_E
   20     | FUNC_S . FUNC_E

    ARGEX   shift, and go to state 1
    FUNC_E  shift, and go to state 23
    LABEL   shift, and go to state 2
    '$'     shift, and go to state 3

    argm  go to state 24
    args  go to state 25
    arg   go to state 26


state 17

    6 dimension_expression: arg RULE . arg
    7                     | arg RULE . list
   10                     | arg RULE . arg REW arg
   11                     | arg RULE . arg REW list
   12                     | arg RULE . list REW arg
   13                     | arg RULE . list REW list

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    list  go to state 27
    arg   go to state 28


state 18

   18 list: arg func .
   21 func: func . func

    FUNC_S  shift, and go to state 16

    $default  reduce using rule 18 (list)

    func  go to state 29


state 19

   30 arg: LABEL ARGEX DIM .

    $default  reduce using rule 30 (arg)


state 20

   31 arg: '$' LABEL ARGEX .
   32    | '$' LABEL ARGEX . DIM

    DIM  shift, and go to state 30

    $default  reduce using rule 31 (arg)


state 21

    9 dimension_expression: list RULE list .
   16                     | list RULE list . REW arg
   17                     | list RULE list . REW list

    REW  shift, and go to state 31

    $default  reduce using rule 9 (dimension_expression)


state 22

    8 dimension_expression: list RULE arg .
   14                     | list RULE arg . REW arg
   15                     | list RULE arg . REW list
   18 list: arg . func

    FUNC_S  shift, and go to state 16
    REW     shift, and go to state 32

    $default  reduce using rule 8 (dimension_expression)

    func  go to state 18


state 23

   20 func: FUNC_S FUNC_E .

    $default  reduce using rule 20 (func)


state 24

   19 func: FUNC_S argm . FUNC_E
   24 argm: argm . LIST argm

    LIST    shift, and go to state 33
    FUNC_E  shift, and go to state 34


state 25

   22 argm: args .
   23     | args . func
   26 args: args . LIST arg

    LIST    shift, and go to state 35
    FUNC_S  shift, and go to state 16

    LIST      [reduce using rule 22 (argm)]
    $default  reduce using rule 22 (argm)

    func  go to state 36


state 26

   25 args: arg .

    $default  reduce using rule 25 (args)


state 27

    7 dimension_expression: arg RULE list .
   12                     | arg RULE list . REW arg
   13                     | arg RULE list . REW list

    REW  shift, and go to state 37

    $default  reduce using rule 7 (dimension_expression)


state 28

    6 dimension_expression: arg RULE arg .
   10                     | arg RULE arg . REW arg
   11                     | arg RULE arg . REW list
   18 list: arg . func

    FUNC_S  shift, and go to state 16
    REW     shift, and go to state 38

    $default  reduce using rule 6 (dimension_expression)

    func  go to state 18


state 29

   21 func: func . func
   21     | func func .

    FUNC_S  shift, and go to state 16

    FUNC_S    [reduce using rule 21 (func)]
    $default  reduce using rule 21 (func)

    func  go to state 29


state 30

   32 arg: '$' LABEL ARGEX DIM .

    $default  reduce using rule 32 (arg)


state 31

   16 dimension_expression: list RULE list REW . arg
   17                     | list RULE list REW . list

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    list  go to state 39
    arg   go to state 40


state 32

   14 dimension_expression: list RULE arg REW . arg
   15                     | list RULE arg REW . list

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    list  go to state 41
    arg   go to state 42


state 33

   24 argm: argm LIST . argm

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    argm  go to state 43
    args  go to state 25
    arg   go to state 26


state 34

   19 func: FUNC_S argm FUNC_E .

    $default  reduce using rule 19 (func)


state 35

   26 args: args LIST . arg

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    arg  go to state 44


state 36

   21 func: func . func
   23 argm: args func .

    FUNC_S  shift, and go to state 16

    $default  reduce using rule 23 (argm)

    func  go to state 29


state 37

   12 dimension_expression: arg RULE list REW . arg
   13                     | arg RULE list REW . list

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    list  go to state 45
    arg   go to state 46


state 38

   10 dimension_expression: arg RULE arg REW . arg
   11                     | arg RULE arg REW . list

    ARGEX  shift, and go to state 1
    LABEL  shift, and go to state 2
    '$'    shift, and go to state 3

    list  go to state 47
    arg   go to state 48


state 39

   17 dimension_expression: list RULE list REW list .

    $default  reduce using rule 17 (dimension_expression)


state 40

   16 dimension_expression: list RULE list REW arg .
   18 list: arg . func

    FUNC_S  shift, and go to state 16

    $default  reduce using rule 16 (dimension_expression)

    func  go to state 18


state 41

   15 dimension_expression: list RULE arg REW list .

    $default  reduce using rule 15 (dimension_expression)


state 42

   14 dimension_expression: list RULE arg REW arg .
   18 list: arg . func

    FUNC_S  shift, and go to state 16

    $default  reduce using rule 14 (dimension_expression)

    func  go to state 18


state 43

   24 argm: argm . LIST argm
   24     | argm LIST argm .

    LIST  shift, and go to state 33

    $default  reduce using rule 24 (argm)


state 44

   26 args: args LIST arg .

    $default  reduce using rule 26 (args)


state 45

   13 dimension_expression: arg RULE list REW list .

    $default  reduce using rule 13 (dimension_expression)


state 46

   12 dimension_expression: arg RULE list REW arg .
   18 list: arg . func

    FUNC_S  shift, and go to state 16

    $default  reduce using rule 12 (dimension_expression)

    func  go to state 18


state 47

   11 dimension_expression: arg RULE arg REW list .

    $default  reduce using rule 11 (dimension_expression)


state 48

   10 dimension_expression: arg RULE arg REW arg .
   18 list: arg . func

    FUNC_S  shift, and go to state 16

    $default  reduce using rule 10 (dimension_expression)

    func  go to state 18
